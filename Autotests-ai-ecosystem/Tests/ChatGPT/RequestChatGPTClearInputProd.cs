// Generated by Selenium IDE
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Support.UI;
using OpenQA.Selenium.Interactions;
using NUnit.Framework;
using System.Drawing;

namespace ChatGPT
{
    [TestFixture]
    public class RequestChatGPTClearInputProd : IDisposable
    {
        private IWebDriver driver;
        public IDictionary<string, object> vars { get; private set; }
        private IJavaScriptExecutor js;
        private WebDriverWait wait;

        [SetUp]
        public void SetUp()
        {
            var options = new ChromeOptions();
            options.AddArgument("--start-maximized");
            options.AddArgument("--ignore-certificate-errors");
            driver = new ChromeDriver(options);
            js = (IJavaScriptExecutor)driver;
            vars = new Dictionary<string, object>();
            wait = new WebDriverWait(driver, TimeSpan.FromSeconds(30));
        }

        [TearDown]
        public void TearDown()
        {
            driver?.Quit();
            driver?.Dispose();
        }

        public void Dispose()
        {
            TearDown();
        }

        [Test]
        public void RequestChatGPTClearInput()
        {
            try
            {
                Console.WriteLine("Step 1: Navigating to login page...");
                driver.Navigate().GoToUrl("https://ai-ecosystem.janusww.com/auth/login.html");
                driver.Manage().Window.Size = new Size(1200, 800);

                Console.WriteLine("Waiting for login page to load...");
                wait.Until(drv =>
                {
                    try
                    {
                        return drv.FindElement(By.Id("loginform-login")).Displayed &&
                               drv.Url.ToLower().Contains("login");
                    }
                    catch
                    {
                        return false;
                    }
                });

                Console.WriteLine("Step 2: Filling login field...");
                driver.FindElement(By.Id("loginform-login")).SendKeys("v_shutenko");

                Console.WriteLine("Step 3: Filling password field...");
                driver.FindElement(By.Id("loginform-password")).SendKeys("8nEThznM");

                Console.WriteLine("Step 4: Clicking login button...");
                driver.FindElement(By.CssSelector(".icon-circle-right2")).Click();

                {
                    var element = driver.FindElement(By.CssSelector(".icon-circle-right2"));
                    Actions builder = new Actions(driver);
                    builder.MoveToElement(element).Perform();
                }

                Console.WriteLine("Step 5: Waiting for successful login...");
                wait.Until(drv => !drv.Url.ToLower().Contains("login"));

                Console.WriteLine("Step 6: Navigating to ChatGPT page...");
                // Ожидаем загрузки основной страницы
                wait.Until(drv => drv.FindElements(By.CssSelector(".mega-menu, .main-content, [class*='menu']")).Count > 0);

                // Если есть мега-меню, открываем его и выбираем ChatGPT
                try
                {
                    var megaMenuElements = driver.FindElements(By.CssSelector(".mega-menu .caret"));
                    if (megaMenuElements.Count > 0 && megaMenuElements[0].Displayed)
                    {
                        Console.WriteLine("Step 7: Opening mega menu...");
                        megaMenuElements[0].Click();

                        Console.WriteLine("Step 8: Selecting ChatGPT...");
                        wait.Until(drv =>
                        {
                            var chatGPTLinks = drv.FindElements(By.LinkText("ChatGPT"));
                            return chatGPTLinks.Count > 0 && chatGPTLinks[0].Displayed;
                        });
                        driver.FindElement(By.LinkText("ChatGPT")).Click();
                    }
                }
                catch (Exception menuEx)
                {
                    Console.WriteLine($"Mega menu handling failed: {menuEx.Message}");
                    Console.WriteLine("Trying direct navigation...");
                    driver.Navigate().GoToUrl("https://ai-ecosystem.janusww.com/request/model.html");
                }

                Console.WriteLine("Step 9: Waiting for ChatGPT page to load...");
                wait.Until(drv =>
                {
                    var textAreaElements = drv.FindElements(By.Id("textarea_request"));
                    return textAreaElements.Count > 0 && textAreaElements[0].Displayed;
                });

                Console.WriteLine("Step 10: Entering text into request field...");
                var textArea = driver.FindElement(By.Id("textarea_request"));
                textArea.Click();
                textArea.Clear();
                textArea.SendKeys("Привет!");

                // Проверяем, что текст действительно введен
                string? enteredText = textArea.GetAttribute("value");
                Assert.That(enteredText, Is.EqualTo("Привет!"), "Text was not entered correctly");
                Console.WriteLine($"Text entered: {enteredText}");

                Console.WriteLine("Step 11: Clearing input field...");
                var clearButton = driver.FindElement(By.Id("clear_request"));
                clearButton.Click();

                Console.WriteLine("Step 12: Verifying field is cleared...");
                // Ждем очистки поля
                wait.Until(drv =>
                {
                    try
                    {
                        var currentTextArea = drv.FindElement(By.Id("textarea_request"));
                        string? currentText = currentTextArea.GetAttribute("value");
                        return string.IsNullOrEmpty(currentText);
                    }
                    catch
                    {
                        return false;
                    }
                });

                // Финальная проверка
                var clearedTextArea = driver.FindElement(By.Id("textarea_request"));
                string? clearedText = clearedTextArea.GetAttribute("value");

                Assert.That(string.IsNullOrEmpty(clearedText), Is.True,
                    $"Input field was not cleared. Current content: '{clearedText}'");

                Console.WriteLine("Step 13: Input field successfully cleared!");

                Console.WriteLine("Test completed successfully: Input field clearing functionality works correctly");
            }
            catch (WebDriverTimeoutException timeoutEx)
            {
                Console.WriteLine($"Timeout exception occurred: {timeoutEx.Message}");
                Console.WriteLine($"Current URL: {driver.Url}");
                Console.WriteLine($"Page Title: {driver.Title}");

                try
                {
                    Console.WriteLine("Page source snippet (first 1000 chars):");
                    string pageSource = driver.PageSource;
                    Console.WriteLine(pageSource.Substring(0, Math.Min(1000, pageSource.Length)));
                }
                catch (Exception pageSourceEx)
                {
                    Console.WriteLine($"Failed to get page source: {pageSourceEx.Message}");
                }

                try
                {
                    var screenshot = ((ITakesScreenshot)driver).GetScreenshot();
                    string timestamp = DateTime.Now.ToString("yyyyMMdd_HHmmss");
                    screenshot.SaveAsFile($"clear_input_timeout_{timestamp}.png");
                    Console.WriteLine($"Screenshot saved as clear_input_timeout_{timestamp}.png");
                }
                catch (Exception screenshotEx)
                {
                    Console.WriteLine($"Failed to take screenshot: {screenshotEx.Message}");
                }

                throw;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Exception occurred: {ex.Message}");
                Console.WriteLine($"Stack Trace: {ex.StackTrace}");
                Console.WriteLine($"Current URL: {driver.Url}");
                Console.WriteLine($"Page Title: {driver.Title}");

                try
                {
                    Console.WriteLine("Page source snippet (first 500 chars):");
                    string pageSource = driver.PageSource;
                    Console.WriteLine(pageSource.Substring(0, Math.Min(500, pageSource.Length)));
                }
                catch (Exception pageSourceEx)
                {
                    Console.WriteLine($"Failed to get page source: {pageSourceEx.Message}");
                }

                try
                {
                    var screenshot = ((ITakesScreenshot)driver).GetScreenshot();
                    string timestamp = DateTime.Now.ToString("yyyyMMdd_HHmmss");
                    screenshot.SaveAsFile($"clear_input_error_{timestamp}.png");
                    Console.WriteLine($"Screenshot saved as clear_input_error_{timestamp}.png");
                }
                catch (Exception screenshotEx)
                {
                    Console.WriteLine($"Failed to take screenshot: {screenshotEx.Message}");
                }

                throw;
            }
        }
    }
}