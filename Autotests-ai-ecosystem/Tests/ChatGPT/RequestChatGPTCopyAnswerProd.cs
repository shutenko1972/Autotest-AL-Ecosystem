// Generated by Selenium IDE
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Support.UI;
using OpenQA.Selenium.Interactions;
using NUnit.Framework;
using System.Drawing;

namespace ChatGPT
{
    [TestFixture]
    public class RequestChatGPTCopyAnswerProd : IDisposable
    {
        private IWebDriver driver;
        public IDictionary<string, object> vars { get; private set; }
        private IJavaScriptExecutor js;
        private WebDriverWait wait;

        [SetUp]
        public void SetUp()
        {
            var options = new ChromeOptions();
            options.AddArgument("--start-maximized");
            options.AddArgument("--ignore-certificate-errors");
            driver = new ChromeDriver(options);
            js = (IJavaScriptExecutor)driver;
            vars = new Dictionary<string, object>();
            wait = new WebDriverWait(driver, TimeSpan.FromSeconds(60));
        }

        [TearDown]
        public void TearDown()
        {
            driver?.Quit();
            driver?.Dispose();
        }

        public void Dispose()
        {
            TearDown();
        }

        [Test]
        public void RequestChatGPTCopyAnswer()
        {
            try
            {
                Console.WriteLine("Step 1: Navigating to login page...");
                driver.Navigate().GoToUrl("https://ai-ecosystem.janusww.com/auth/login.html");
                driver.Manage().Window.Size = new Size(1200, 800);

                Console.WriteLine("Waiting for login page to load...");
                wait.Until(drv =>
                {
                    try
                    {
                        return drv.FindElement(By.Id("loginform-login")).Displayed &&
                               drv.Url.ToLower().Contains("login");
                    }
                    catch
                    {
                        return false;
                    }
                });

                Console.WriteLine("Step 2: Filling login field...");
                driver.FindElement(By.Id("loginform-login")).SendKeys("v_shutenko");

                Console.WriteLine("Step 3: Filling password field...");
                driver.FindElement(By.Id("loginform-password")).SendKeys("8nEThznM");

                Console.WriteLine("Step 4: Clicking login button...");
                driver.FindElement(By.CssSelector(".icon-circle-right2")).Click();

                Console.WriteLine("Step 5: Waiting for successful login...");
                wait.Until(drv => !drv.Url.ToLower().Contains("login"));

                Console.WriteLine("Step 6: Navigating to ChatGPT page...");
                // Ожидаем загрузки основной страницы
                wait.Until(drv => drv.FindElements(By.CssSelector(".mega-menu, .main-content, [class*='menu']")).Count > 0);

                // Если есть мега-меню, открываем его и выбираем ChatGPT
                try
                {
                    var megaMenuElements = driver.FindElements(By.CssSelector(".mega-menu .caret"));
                    if (megaMenuElements.Count > 0 && megaMenuElements[0].Displayed)
                    {
                        Console.WriteLine("Step 7: Opening mega menu...");
                        megaMenuElements[0].Click();

                        Console.WriteLine("Step 8: Selecting ChatGPT...");
                        wait.Until(drv =>
                        {
                            var chatGPTLinks = drv.FindElements(By.LinkText("ChatGPT"));
                            return chatGPTLinks.Count > 0 && chatGPTLinks[0].Displayed;
                        });
                        driver.FindElement(By.LinkText("ChatGPT")).Click();
                    }
                }
                catch (Exception menuEx)
                {
                    Console.WriteLine($"Mega menu handling failed: {menuEx.Message}");
                    Console.WriteLine("Trying direct navigation...");
                    driver.Navigate().GoToUrl("https://ai-ecosystem.janusww.com/request/model.html");
                }

                Console.WriteLine("Step 9: Waiting for ChatGPT page to load...");
                wait.Until(drv =>
                {
                    var textAreaElements = drv.FindElements(By.Id("textarea_request"));
                    return textAreaElements.Count > 0 && textAreaElements[0].Displayed;
                });

                Console.WriteLine("Step 10: Entering request...");
                var textArea = driver.FindElement(By.Id("textarea_request"));
                textArea.Click();
                textArea.Clear();
                textArea.SendKeys("Ghbdtn! Lhepmz!");

                // Проверяем, что текст введен корректно
                string? enteredText = textArea.GetAttribute("value");
                Assert.That(enteredText, Is.EqualTo("Ghbdtn! Lhepmz!"), "Request text was not entered correctly");
                Console.WriteLine($"Request entered: {enteredText}");

                Console.WriteLine("Step 11: Sending request...");
                driver.FindElement(By.CssSelector(".ladda-label")).Click();

                Console.WriteLine("Step 12: Waiting for response...");
                // Ожидаем появления ответа
                IWebElement? responseElement = null;
                DateTime startTime = DateTime.Now;

                while ((DateTime.Now - startTime).TotalSeconds < 90 && responseElement == null)
                {
                    try
                    {
                        // Ищем различные возможные элементы ответа
                        var possibleResponseElements = driver.FindElements(By.CssSelector(
                            ".coping, .content, .response, .answer, .message, " +
                            "[class*='response'], [class*='answer'], [class*='message']"
                        ));

                        responseElement = possibleResponseElements
                            .FirstOrDefault(e => e.Displayed && !string.IsNullOrWhiteSpace(e.Text));

                        if (responseElement != null)
                        {
                            Console.WriteLine($"Response found: {responseElement.Text.Substring(0, Math.Min(50, responseElement.Text.Length))}...");
                            break;
                        }

                        Thread.Sleep(2000);
                        Console.WriteLine("Waiting for response... (" + (int)(DateTime.Now - startTime).TotalSeconds + "s)");
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Error while waiting for response: {ex.Message}");
                        Thread.Sleep(2000);
                    }
                }

                if (responseElement == null)
                {
                    Assert.Fail("Response not found within 90 seconds");
                }

                Console.WriteLine("Step 13: Clicking copy button...");
                // Ищем кнопку копирования
                var copyButton = driver.FindElement(By.CssSelector(".coping"));
                Assert.That(copyButton.Displayed, Is.True, "Copy button is not displayed");
                copyButton.Click();

                Console.WriteLine("Step 14: Verifying copy action...");
                // Можно добавить проверку через буфер обмена, но это сложно в Selenium
                // Вместо этого проверим, что кнопка доступна и сработала
                Thread.Sleep(1000); // Даем время для копирования

                Console.WriteLine("Step 15: Clicking on content area...");
                var contentArea = driver.FindElement(By.CssSelector(".content"));
                contentArea.Click();

                Console.WriteLine("Step 16: Entering new text to verify functionality...");
                textArea.Click();
                textArea.Clear();

                // Используем текст без эмодзи (ChromeDriver не поддерживает символы вне BMP)
                string safeText = "Привет! Чем могу помочь?";
                textArea.SendKeys(safeText);

                // Проверяем, что новый текст введен
                string? newText = textArea.GetAttribute("value");
                Assert.That(newText, Is.EqualTo(safeText), "New text was not entered correctly");

                Console.WriteLine("Step 17: Test completed successfully!");
                Console.WriteLine("Copy answer functionality works correctly");
            }
            catch (WebDriverTimeoutException timeoutEx)
            {
                Console.WriteLine($"Timeout exception occurred: {timeoutEx.Message}");
                Console.WriteLine($"Current URL: {driver.Url}");
                Console.WriteLine($"Page Title: {driver.Title}");

                try
                {
                    Console.WriteLine("Page source snippet (first 1000 chars):");
                    string pageSource = driver.PageSource;
                    Console.WriteLine(pageSource.Substring(0, Math.Min(1000, pageSource.Length)));
                }
                catch (Exception pageSourceEx)
                {
                    Console.WriteLine($"Failed to get page source: {pageSourceEx.Message}");
                }

                try
                {
                    var screenshot = ((ITakesScreenshot)driver).GetScreenshot();
                    string timestamp = DateTime.Now.ToString("yyyyMMdd_HHmmss");
                    screenshot.SaveAsFile($"copy_answer_timeout_{timestamp}.png");
                    Console.WriteLine($"Screenshot saved as copy_answer_timeout_{timestamp}.png");
                }
                catch (Exception screenshotEx)
                {
                    Console.WriteLine($"Failed to take screenshot: {screenshotEx.Message}");
                }

                throw;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Exception occurred: {ex.Message}");
                Console.WriteLine($"Stack Trace: {ex.StackTrace}");
                Console.WriteLine($"Current URL: {driver.Url}");
                Console.WriteLine($"Page Title: {driver.Title}");

                try
                {
                    Console.WriteLine("Page source snippet (first 500 chars):");
                    string pageSource = driver.PageSource;
                    Console.WriteLine(pageSource.Substring(0, Math.Min(500, pageSource.Length)));
                }
                catch (Exception pageSourceEx)
                {
                    Console.WriteLine($"Failed to get page source: {pageSourceEx.Message}");
                }

                try
                {
                    var screenshot = ((ITakesScreenshot)driver).GetScreenshot();
                    string timestamp = DateTime.Now.ToString("yyyyMMdd_HHmmss");
                    screenshot.SaveAsFile($"copy_answer_error_{timestamp}.png");
                    Console.WriteLine($"Screenshot saved as copy_answer_error_{timestamp}.png");
                }
                catch (Exception screenshotEx)
                {
                    Console.WriteLine($"Failed to take screenshot: {screenshotEx.Message}");
                }

                throw;
            }
        }
    }
}