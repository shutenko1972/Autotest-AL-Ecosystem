// Generated by Selenium IDE
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Support.UI;
using OpenQA.Selenium.Interactions;
using NUnit.Framework;
using System.Drawing;

namespace ChatGPT
{
    [TestFixture]
    public class RequestChatGPTSendRequestTest : IDisposable
    {
        private IWebDriver driver;
        public IDictionary<string, object> vars { get; private set; }
        private IJavaScriptExecutor js;
        private WebDriverWait wait;

        [SetUp]
        public void SetUp()
        {
            var options = new ChromeOptions();
            options.AddArgument("--start-maximized");
            options.AddArgument("--ignore-certificate-errors");
            driver = new ChromeDriver(options);
            js = (IJavaScriptExecutor)driver;
            vars = new Dictionary<string, object>();
            wait = new WebDriverWait(driver, TimeSpan.FromSeconds(60));
        }

        [TearDown]
        public void TearDown()
        {
            driver?.Quit();
            driver?.Dispose();
        }

        public void Dispose()
        {
            TearDown();
        }

        [Test]
        public void RequestChatGPTSendRequest()
        {
            try
            {
                Console.WriteLine("Step 1: Navigating to login page...");
                driver.Navigate().GoToUrl("https://ai-ecosystem-test.janusww.com:9999/auth/login.html");
                driver.Manage().Window.Size = new Size(1200, 800);

                Console.WriteLine("Waiting for login page to load...");
                wait.Until(drv =>
                {
                    try
                    {
                        return drv.FindElement(By.Id("loginform-login")).Displayed &&
                               drv.Url.ToLower().Contains("login");
                    }
                    catch
                    {
                        return false;
                    }
                });

                Console.WriteLine("Step 2: Filling login field...");
                driver.FindElement(By.Id("loginform-login")).SendKeys("v_shutenko");

                Console.WriteLine("Step 3: Filling password field...");
                driver.FindElement(By.Id("loginform-password")).SendKeys("8nEThznM");

                Console.WriteLine("Step 4: Clicking login button...");
                driver.FindElement(By.Name("login-button")).Click();

                {
                    var element = driver.FindElement(By.Name("login-button"));
                    Actions builder = new Actions(driver);
                    builder.MoveToElement(element).Perform();
                }

                Console.WriteLine("Step 5: Waiting for successful login...");
                wait.Until(drv => !drv.Url.ToLower().Contains("login"));

                Console.WriteLine("Step 6: Opening mega menu...");
                wait.Until(drv => drv.FindElement(By.CssSelector(".mega-menu .caret")).Displayed);
                driver.FindElement(By.CssSelector(".mega-menu .caret")).Click();

                Console.WriteLine("Step 7: Selecting ChatGPT...");
                wait.Until(drv => drv.FindElement(By.LinkText("ChatGPT")).Displayed);
                driver.FindElement(By.LinkText("ChatGPT")).Click();

                Console.WriteLine("Step 8: Waiting for ChatGPT page to load...");
                wait.Until(drv => drv.FindElement(By.Id("textarea_request")).Displayed);

                Console.WriteLine("Step 9: Entering request...");
                driver.FindElement(By.Id("textarea_request")).Click();
                driver.FindElement(By.Id("textarea_request")).SendKeys("Привет!");

                Console.WriteLine("Step 10: Sending request...");
                driver.FindElement(By.CssSelector(".ladda-label")).Click();

                Console.WriteLine("Step 11: Waiting for ChatGPT response...");

                // Ожидание ответа от ChatGPT с улучшенной логикой
                bool responseReceived = false;
                DateTime startTime = DateTime.Now;
                string lastResponseText = "";

                while ((DateTime.Now - startTime).TotalSeconds < 90 && !responseReceived)
                {
                    try
                    {
                        // 1. Ищем текст ответа в различных элементах
                        var allVisibleElements = driver.FindElements(By.CssSelector("*"))
                            .Where(e => e.Displayed && !string.IsNullOrWhiteSpace(e.Text))
                            .ToList();

                        // Ищем элементы, которые могут содержать ответ
                        foreach (var element in allVisibleElements)
                        {
                            string elementText = element.Text.Trim();

                            // Проверяем, что это похоже на ответ (исключаем системные сообщения)
                            if (elementText.Length > 10 &&
                                !elementText.Contains("Temperature:") &&
                                !elementText.Contains("TopP:") &&
                                !elementText.Contains("Controls randomness:") &&
                                !elementText.Contains("Controls diversity:") &&
                                !elementText.Contains("Value:") &&
                                elementText != "Привет!" &&
                                elementText != lastResponseText)
                            {
                                Console.WriteLine($"Potential response found: {elementText.Substring(0, Math.Min(50, elementText.Length))}...");
                                responseReceived = true;
                                lastResponseText = elementText;
                                break;
                            }
                        }

                        if (responseReceived) break;

                        // 2. Проверяем изменения в DOM после отправки запроса
                        var responseContainers = driver.FindElements(By.CssSelector(
                            "div:not([style*='display: none']), " +
                            "div:not([class*='hidden']), " +
                            "[class*='response'], " +
                            "[class*='message'], " +
                            "[class*='chat'], " +
                            "[class*='answer'], " +
                            ".content, " +
                            ".text, " +
                            ".msg"
                        ));

                        foreach (var container in responseContainers.Where(c => c.Displayed))
                        {
                            string containerText = container.Text.Trim();
                            if (containerText.Length > 20 &&
                                !containerText.Contains("Temperature:") &&
                                containerText != "Привет!" &&
                                containerText != lastResponseText)
                            {
                                Console.WriteLine($"Response container found: {containerText.Substring(0, Math.Min(50, containerText.Length))}...");
                                responseReceived = true;
                                lastResponseText = containerText;
                                break;
                            }
                        }

                        if (responseReceived) break;

                        // 3. Проверяем через JavaScript
                        try
                        {
                            var jsResponse = js.ExecuteScript(@"
                                var responses = [];
                                var allElements = document.querySelectorAll('*');
                                for (var i = 0; i < allElements.length; i++) {
                                    var el = allElements[i];
                                    if (el.offsetWidth > 0 && el.offsetHeight > 0 && el.textContent.trim().length > 20) {
                                        var text = el.textContent.trim();
                                        if (!text.includes('Temperature:') && 
                                            !text.includes('TopP:') && 
                                            !text.includes('Controls randomness:') &&
                                            !text.includes('Controls diversity:') &&
                                            !text.includes('Value:') &&
                                            text !== 'Привет!') {
                                            responses.push(text);
                                        }
                                    }
                                }
                                return responses.length > 0 ? responses[0] : null;
                            ");

                            if (jsResponse != null)
                            {
                                string? jsResponseText = jsResponse.ToString();
                                if (!string.IsNullOrEmpty(jsResponseText) && jsResponseText != lastResponseText)
                                {
                                    Console.WriteLine($"JavaScript found response: {jsResponseText.Substring(0, Math.Min(50, jsResponseText.Length))}...");
                                    responseReceived = true;
                                    lastResponseText = jsResponseText;
                                    break;
                                }
                            }
                        }
                        catch (Exception jsEx)
                        {
                            Console.WriteLine($"JavaScript error: {jsEx.Message}");
                        }

                        if (responseReceived) break;

                        // 4. Проверяем индикаторы загрузки
                        var loadingElements = driver.FindElements(By.CssSelector(
                            ".ladda-spinner, .loading, .spinner, .loader, .progress-bar, [class*='loading']"
                        ));

                        bool isLoading = loadingElements.Any(e => e.Displayed);

                        if (!isLoading)
                        {
                            Console.WriteLine("Loading indicators disappeared, assuming response is complete");
                            responseReceived = true;
                            break;
                        }

                        Console.WriteLine("Waiting for response... (" + (int)(DateTime.Now - startTime).TotalSeconds + "s)");
                        Thread.Sleep(2000);
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Error while waiting for response: {ex.Message}");
                        Thread.Sleep(2000);
                    }
                }

                if (!responseReceived)
                {
                    // Делаем детальный анализ страницы
                    Console.WriteLine("=== PAGE ANALYSIS ===");
                    Console.WriteLine($"Current URL: {driver.Url}");
                    Console.WriteLine($"Page Title: {driver.Title}");

                    try
                    {
                        // Получаем весь видимый текст на странице
                        var allText = js.ExecuteScript(@"
                            var allText = '';
                            var elements = document.querySelectorAll('*');
                            for (var i = 0; i < elements.length; i++) {
                                var el = elements[i];
                                if (el.offsetWidth > 0 && el.offsetHeight > 0 && el.textContent.trim()) {
                                    var text = el.textContent.trim();
                                    if (text.length > 10 && !text.includes('Temperature:')) {
                                        allText += text + '\n---\n';
                                    }
                                }
                            }
                            return allText;
                        ");

                        Console.WriteLine("All visible text on page:");
                        string? allTextResult = allText?.ToString();
                        Console.WriteLine(!string.IsNullOrEmpty(allTextResult) ? allTextResult : "No text found");
                    }
                    catch (Exception analysisEx)
                    {
                        Console.WriteLine($"Page analysis failed: {analysisEx.Message}");
                    }

                    // Сохраняем скриншот
                    try
                    {
                        var screenshot = ((ITakesScreenshot)driver).GetScreenshot();
                        string timestamp = DateTime.Now.ToString("yyyyMMdd_HHmmss");
                        screenshot.SaveAsFile($"chatgpt_detailed_analysis_{timestamp}.png");
                        Console.WriteLine($"Detailed screenshot saved");
                    }
                    catch (Exception screenshotEx)
                    {
                        Console.WriteLine($"Failed to take screenshot: {screenshotEx.Message}");
                    }

                    Assert.Fail("Таймаут ожидания ответа от ChatGPT. Ответ не был обнаружен в течение 90 секунд.");
                }

                Console.WriteLine("Step 12: Response successfully received!");
                Thread.Sleep(2000);

                Console.WriteLine("Test completed successfully: ChatGPT request sent and response received");
            }
            catch (WebDriverTimeoutException timeoutEx)
            {
                Console.WriteLine($"Timeout exception occurred: {timeoutEx.Message}");
                Console.WriteLine($"Current URL: {driver.Url}");
                Console.WriteLine($"Page Title: {driver.Title}");

                try
                {
                    Console.WriteLine("Page source snippet (first 1000 chars):");
                    Console.WriteLine(driver.PageSource.Substring(0, Math.Min(1000, driver.PageSource.Length)));
                }
                catch (Exception pageSourceEx)
                {
                    Console.WriteLine($"Failed to get page source: {pageSourceEx.Message}");
                }

                try
                {
                    var screenshot = ((ITakesScreenshot)driver).GetScreenshot();
                    string timestamp = DateTime.Now.ToString("yyyyMMdd_HHmmss");
                    screenshot.SaveAsFile($"error_screenshot_{timestamp}.png");
                    Console.WriteLine($"Screenshot saved as error_screenshot_{timestamp}.png");
                }
                catch (Exception screenshotEx)
                {
                    Console.WriteLine($"Failed to take screenshot: {screenshotEx.Message}");
                }

                throw;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Exception occurred: {ex.Message}");
                Console.WriteLine($"Stack Trace: {ex.StackTrace}");
                Console.WriteLine($"Current URL: {driver.Url}");
                Console.WriteLine($"Page Title: {driver.Title}");

                try
                {
                    Console.WriteLine("Page source snippet (first 500 chars):");
                    Console.WriteLine(driver.PageSource.Substring(0, Math.Min(500, driver.PageSource.Length)));
                }
                catch (Exception pageSourceEx)
                {
                    Console.WriteLine($"Failed to get page source: {pageSourceEx.Message}");
                }

                try
                {
                    var screenshot = ((ITakesScreenshot)driver).GetScreenshot();
                    string timestamp = DateTime.Now.ToString("yyyyMMdd_HHmmss");
                    screenshot.SaveAsFile($"error_screenshot_{timestamp}.png");
                    Console.WriteLine($"Screenshot saved as error_screenshot_{timestamp}.png");
                }
                catch (Exception screenshotEx)
                {
                    Console.WriteLine($"Failed to take screenshot: {screenshotEx.Message}");
                }

                throw;
            }
        }
    }
}